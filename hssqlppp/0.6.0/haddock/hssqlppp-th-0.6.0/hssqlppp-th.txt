-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | hssqlppp extras which need template-haskell
--   
--   hssqlppp extras which need template-haskell
--   
--   Documentation, examples on the homepage:
--   <a>http://jakewheat.github.com/hssqlppp/</a>.
--   
--   Changes here:
--   <a>https://github.com/JakeWheat/hssqlppp/blob/master/CHANGES</a>
@package hssqlppp-th
@version 0.6.0


-- | A quasiquoter for SQL. Antiquoting is a bit inconsistent.
--   
--   Example:
--   
--   <pre>
--   import Database.HsSqlPpp.Ast
--   import Database.HsSqlPpp.Quote
--   import Database.HsSqlPpp.Annotation
--   
--   test :: Statement
--   test = [$sqlStmt|
--   
--     create table $n(tablename) (
--      $m(varname) $n(typename)
--     );
--   
--           |]
--     where
--       tablename = [sqlName| my_table |]
--       varname = [sqlNameComponent| my_field |]
--       typename = [sqlName| text |]
--   </pre>
--   
--   See <a>http://jakewheat.github.com/hssqlppp/QuasiQuoteTests.html</a>
--   for more simple examples
--   
--   The splices are:
--   
--   <ul>
--   <li>$e(scalarexpression)</li>
--   <li>$s(string)</li>
--   <li>$t(triggerevent)</li>
--   <li>$s(statement)</li>
--   <li>$n(name)</li>
--   <li>$m(namecomponent)</li>
--   </ul>
--   
--   You can use $m() in a name context, and $n() or $m() in a scalar
--   expression context. You can only use a single variable name in a
--   splice atm.
module Database.HsSqlPpp.Quote

-- | quotes Statements
sqlStmts :: QuasiQuoter

-- | quotes a single Statement
sqlStmt :: QuasiQuoter

-- | quotes plpgsql Statements
pgsqlStmts :: QuasiQuoter

-- | quotes a plpgsql Statement
pgsqlStmt :: QuasiQuoter

-- | quotes a ScalarExpr
sqlExpr :: QuasiQuoter

-- | quotes a Name
sqlName :: QuasiQuoter

-- | quotes a Name
sqlNameComponent :: QuasiQuoter
